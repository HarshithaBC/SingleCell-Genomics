---
title: "Single Cell Immune Profiling of Human Ovarian Tumour."
output: html_document
date: "2024-03-04"
editor_options: 
  markdown: 
    wrap: 72
---


5k Human Ovarian Tumor Isolated with Chromium Nuclei Isolation Kit
Single Cell Immune Profiling Dataset by Cell Ranger 7.0.0

Nuclei were isolated from \~25 mg of fresh frozen human ovarian tumor
purchased from Discovery Life Sciences following the Chromium Nuclei
Isolation Reagent Kits Sample Prep User Guide (CG000505).

Gene Expression libraries were prepared following the Chromium Single
Cell 5'v2 Reagent Kits User Guide (CG000331) and targeting 5,000 cells.
Libraries were sequenced on an Illumina NovaSeq instrument targeting
20,000 reads per cell.

Sequencing data were processed using Cell Ranger, with web_summary.html
and output files available.

Sequencing instrument: Illumina NovaSeq 6000 Sequencing depth: 109,293
mean reads per cell Sequencing configuration: Paired-end, dual indexing;
Read 1: 28 cycles (16 bp barcode, 12 bp UMI) i5 index: 10 cycles (sample
index) i7 index: 10 cycles (sample index) Read 2: 90 cycles (transcript)
Cells detected: 6,842 Median genes per cell: 3,805 Median UMIs per cell:
8,252

I will be doing a simple analysis using Seurat
(<https://satijalab.org/seurat/>). I will be starting with the Counts
matrix/Features and checking it's quality.

Disclaimer - Not my original data or analysis. I obtained the data from 10X genomics website and followed the standard Seurat workflow. I have copied and pasted some parts of the Seurat tutorial, purely for me to look back and understand.

**Loading all the necessary packages**

```{r}
library(dplyr)
library(Seurat)
library(patchwork)
```

**Load the Human Ovarian Tumour dataset**

The Read10X function allows us to load the dataset without any hassel
and there are other file formats like HDF5 with a similar function
Read10X_h5

```{r}
hot.data <- Read10X(data.dir = "~/Personal projects/Single cell- ovarian tumour/5k_human_ovarian_tumor_CNIK_5pv2_filtered_feature_bc_matrix/filtered_feature_bc_matrix")
```

```{r}
dim(hot.data)
```

```{r}
hot.data[c("CD3D", "TCL1A", "MS4A1"), 1:30]
```

**Create Seurat object**

```{r}
hot <- CreateSeuratObject(counts = hot.data, project = "hot5k", min.cells = 3, min.features = 200)
```

```{r}
hot
```

**Quality Check**

the "mitochondrial percentage" or "percent.mt" is a metric that
represents the proportion of transcripts originating from mitochondrial
genes relative to the total number of transcripts in a single cell.
Mitochondrial genes are genes found in the mitochondrial genome, and
their expression level can be indicative of the overall health and
quality of a cell in scRNA-seq data.

The mitochondrial percentage is calculated by dividing the count of
reads mapped to mitochondrial genes by the total count of reads in a
cell and then multiplying by 100 to express it as a percentage. The
formula is:

***Mitochondrial Percentage*** = (Count of Reads Mapped to Mitochondrial
Genes/Total Count of Reads in a Cell)×100

High mitochondrial percentage is often associated with poor-quality
cells, as an elevated proportion of mitochondrial transcripts may
indicate cell stress, apoptosis, or technical artifacts during library
preparation. These cells might be in a compromised state or undergoing
cell death, leading to increased mitochondrial gene expression.

```{r}
hot[["percent.mt"]] <- PercentageFeatureSet(hot, pattern = "^MT-")
summary(hot[["percent.mt"]])
```
So obviously the mitochondrial percentage is quite high and we can further visualize it with violin plots. 

```{r}
VlnPlot(hot, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
```

```{r}
plot1 <- FeatureScatter(hot, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(hot, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
```

We can now select the "good" cells for further analysis. I am personally selecting features between 200 and 7500 based on the violin plots (including the cells with more than 200 features and less than 10,000 features) and setting the mitochondrial percentage, meaning we are including genes with mitochondrial percentage less than 5%. 

```{r}
hot_select <- subset(hot, subset = nFeature_RNA > 200 & nFeature_RNA < 10000 & percent.mt < 5)
```

Let's visualize again - 

```{r}
VlnPlot(hot_select, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
```

```{r}
hot_select[["percent.mt"]] <- PercentageFeatureSet(hot_select, pattern = "^MT-")
summary(hot_select[["percent.mt"]])
```
So yeah we taken down the median mt percentage from 0.6612 to 0.4371. 

**Normalize the data**

After removing unwanted cells from the dataset, the next step is to normalize the data. Normalization is an essential step in the analysis of single-cell RNA sequencing data. It aims to correct for technical variability and differences in sequencing depth between cells, making the expression values comparable across cells. I used the normalization method “LogNormalize” that normalizes the feature expression measurements for each cell by the total expression, multiplies this by a scale factor (10,000 by default), and log-transforms the result. 

```{r}
hot_select <- NormalizeData(hot_select, normalization.method = "LogNormalize", scale.factor = 10000)
hot_select <- NormalizeData(hot_select)
```

**Identify of highly variable features**

I next calculate a subset of features that exhibit high cell-to-cell variation in the dataset (i.e, they are highly expressed in some cells, and lowly expressed in others). 

```{r}
hot_select <- FindVariableFeatures(hot_select, selection.method = "vst", nfeatures = 4000)
```
```{r}
top10 <- head(VariableFeatures(hot_select), 10)
top10
```

```{r}
plot1 <- VariableFeaturePlot(hot_select)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE, max.overlaps = 25)
plot1 + plot2

```

**Scaling the data**

Apply linear transformation before dimensionality reduction. The ScaleData() function: 1.Shifts the expression of each gene, so that the mean expression across cells is 0. 
2.Scales the expression of each gene, so that the variance across cells is 1
This step gives equal weight in downstream analyses, so that highly-expressed genes do not dominate.

```{r}
all.genes <- rownames(hot_select)
hot_select <- ScaleData(hot_select, features = all.genes)
```

**Performing linear dimensional reduction**

We can perform PCA here. For the first principal components, Seurat outputs a list of genes with the most positive and negative loadings, representing modules of genes that exhibit either correlation (or anti-correlation) across single-cells in the dataset.

```{r}
hot_select<- RunPCA(hot_select, features = VariableFeatures(object = hot_select))
```

```{r}
print(hot_select[["pca"]], dims = 1:5, nfeatures = 5)
```

There are ways of visualizing both cells and features that define the PCA, including VizDimReduction(), DimPlot(), and DimHeatmap()

```{r}
VizDimLoadings(hot_select, dims = 1:2, reduction = "pca")
```

```{r}
DimPlot(hot_select, reduction = "pca") + NoLegend()
```

```{r}
DimHeatmap(hot_select, dims = 1, cells = 500, balanced = TRUE)
```
```{r}
DimHeatmap(hot_select, dims = 1:9, cells = 500, balanced = TRUE)
```

**Determining the ‘dimensionality’ of the dataset**

To overcome the extensive technical noise in any single feature for scRNA-seq data, Seurat clusters cells based on their PCA scores, with each PC essentially representing a ‘metafeature’ that combines information across a correlated feature set. The top principal components therefore represent a robust compression of the dataset. However, how many components should we choose to include? 10? 20? 100?

An ‘Elbow plot’: a ranking of principle components based on the percentage of variance explained by each one (ElbowPlot() function). In this example, we can observe an ‘elbow’ around PC9-10, suggesting that the majority of true signal is captured in the first 17 PCs.

```{r}
ElbowPlot(hot_select)
```

**Clustering the cells**

Seurat applies a graph-based clustering approach, building upon initial strategies in (Macosko et al). Importantly, the distance metric which drives the clustering analysis (based on previously identified PCs) remains the same. However, our approach to partitioning the cellular distance matrix into clusters has dramatically improved. Our approach was heavily inspired by recent manuscripts which applied graph-based clustering approaches to scRNA-seq data [SNN-Cliq, Xu and Su, Bioinformatics, 2015] and CyTOF data [PhenoGraph, Levine et al., Cell, 2015]. Briefly, these methods embed cells in a graph structure - for example a K-nearest neighbor (KNN) graph, with edges drawn between cells with similar feature expression patterns, and then attempt to partition this graph into highly interconnected ‘quasi-cliques’ or ‘communities’.

As in PhenoGraph, we first construct a KNN graph based on the euclidean distance in PCA space, and refine the edge weights between any two cells based on the shared overlap in their local neighborhoods (Jaccard similarity). This step is performed using the FindNeighbors() function, and takes as input the previously defined dimensionality of the dataset (first 10 PCs).

To cluster the cells, we next apply modularity optimization techniques such as the Louvain algorithm (default) or SLM [SLM, Blondel et al., Journal of Statistical Mechanics], to iteratively group cells together, with the goal of optimizing the standard modularity function. The FindClusters() function implements this procedure, and contains a resolution parameter that sets the ‘granularity’ of the downstream clustering, with increased values leading to a greater number of clusters. We find that setting this parameter between 0.4-1.2 typically returns good results for single-cell datasets of around 3K cells. Optimal resolution often increases for larger datasets. The clusters can be found using the Idents() function.

```{r}
hot_select <- FindNeighbors(hot_select, dims = 1:17)
hot_select <- FindClusters(hot_select, resolution = 0.5)
```

```{r}
head(Idents(hot_select), 5)
```

**Runing non-linear dimensional reduction (UMAP/tSNE)**

The goal of these algorithms is to learn underlying structure in the dataset, in order to place similar cells together in low-dimensional space. Therefore, cells that are grouped together within graph-based clusters determined above should co-localize on these dimension reduction plots.

```{r}
hot_select <- RunUMAP(hot_select, dims = 1:17)
```

```{r}
DimPlot(hot_select, reduction = "umap")
```

**Finding differentially expressed features (cluster biomarkers)**

```{r}
cluster2.markers <- FindMarkers(hot_select, ident.1 = 2)
head(cluster2.markers, n = 5)
```
```{r}
cluster5.markers <- FindMarkers(hot_select, ident.1 = 5, ident.2 = c(0, 3))
head(cluster5.markers, n = 5)
```
find markers for every cluster compared to all remaining cells, report only the positive ones

```{r include=FALSE}
hot.markers <- FindAllMarkers(hot_select, only.pos = TRUE)
hot.markers %>%
    group_by(cluster) %>%
    dplyr::filter(avg_log2FC > 1)
```
```{r}
top_genes_per_cluster <- hot.markers %>%
  group_by(cluster) %>%
  filter(avg_log2FC > 1) %>%
  top_n(2, wt = avg_log2FC)

# Display the top genes in each cluster
print(top_genes_per_cluster)
```

```{r}
cluster0.markers <- FindMarkers(hot_select, ident.1 = 0, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
```

**Visualizing**

```{r}
VlnPlot(hot_select, features = c("HPSE2", "LINC01297"))
```

```{r}
VlnPlot(hot_select, features = c("FOXP2"), slot = "counts", log = TRUE)
```

```{r}
FeaturePlot(hot_select, features = c("HPSE2", "FOXP2", "LINC01297", "MALAT1"))
```

```{r}
RidgePlot(hot_select, features = c("HPSE2"))
```

```{r}
DotPlot(hot_select, features = c("HPSE2"))
```

```{r}
hot.markers %>%
    group_by(cluster) %>%
    dplyr::filter(avg_log2FC > 1) %>%
    slice_head(n = 10) %>%
    ungroup() -> top10
DoHeatmap(hot_select, features = top10$gene) + NoLegend()
```

**Assigning cell type identity to clusters**

```{r}
levels(hot_select$seurat_clusters)

```

```{r}
new.cluster.ids <- c("T", "B", "CD8 T", "Mono", "NK", "DC", "Platelet", "Naive CD4 T", "CD14+ Mono", "Memory CD4 T")
old_cluster_ids <- levels(hot_select$seurat_clusters)
hot_select$seurat_clusters[hot_select$seurat_clusters %in% old_cluster_ids] <- new.cluster.ids
hot_select$seurat_clusters <- factor(hot_select$seurat_clusters, levels = new.cluster.ids)

```

```{r}
DimPlot(hot_select, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
```

